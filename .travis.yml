language: cpp
dist: bionic

matrix:
  fast_finish: true
  include:
    - os: linux
      addons: &1
        apt:
          packages:
            - g++
            - gcc
            - lcov
            - libeigen3-dev
      env:
        - BUILD_TYPE='release'
        - CXX_COMPILER='g++'
        - C_COMPILER='gcc'
        - RUN_DANGER=false
    - os: linux
      addons: *1
      env:
        - BUILD_TYPE='release'
        - CXX_COMPILER='g++'
        - C_COMPILER='gcc'
        - OPENMP='--omp'
        - RUN_DANGER=false
    - os: linux
      addons: *1
      env:
        - BUILD_TYPE='debug'
        - CXX_COMPILER='g++'
        - C_COMPILER='gcc'
        - COVERAGE='--coverage'
        - RUN_DANGER=false
env:
  global:
    - LC_ALL="en_US.UTF-8"
    - LANG="en_US.UTF-8"
    - LANGUAGE="en_US.UTF-8"
    - PYTHONIOENCODING=UTF-8
    - OMP_NUM_THREADS=1
    - CMAKE_VERSION="3.14.7"
    # Invalidate PYENV_ROOT
    - PYENV_ROOT=$HOME/fuffa

cache:
  timeout: 1000
  pip: true
  directories:
    - $HOME/Deps/cmake/$CMAKE_VERSION
    - $HOME/Deps/eigen

before_install:
  # Dependencies are downloaded in $HOME/Downloads and installed in $HOME/Deps
  - mkdir -p $HOME/Downloads $HOME/Deps

install:
  - ./.ci/cmake.sh
  - export PATH=$HOME/Deps/cmake/$CMAKE_VERSION/bin${PATH:+:$PATH}
  - pip install --user pipenv --upgrade
  - pip install -U pytest
  - pipenv install --three
  - pipenv run python --version

before_script:
  - test -n $CC && unset CC
  - test -n $CXX && unset CXX
  - test -n $FC && unset FC
  - source $(pipenv --venv)/bin/activate
  - |
    if [[ "${RUN_DANGER}" = true ]]; then
      bundle install --gemfile=.ci/Gemfile
      BUNDLE_GEMFILE=.ci/Gemfile bundle exec danger --dangerfile=.ci/Dangerfile
    fi

script:
  - ./.ci/report_versions.sh
  - |
    python ./setup \
           --type=${BUILD_TYPE} \
           --prefix=$HOME/Software/VAMPyR \
           --cxx=${CXX_COMPILER} \
           ${COVERAGE} \
           ${OPENMP} \
           --cmake-options="-DEigen3_DIR=${HOME}/Deps/eigen/share/eigen3/cmake"
  - cd build
  - cmake --build . --target install -- VERBOSE=1
  - ctest --output-on-failure --verbose

after_success:
  - |
    if [[ "${COVERAGE}" = "--coverage" ]]; then
      cd ${TRAVIS_BUILD_DIR}
      lcov --version
      lcov --directory build/vampyr/ --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi
